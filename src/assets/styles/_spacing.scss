@use "sass:map";
@use "variables/sizes";

@function breakpoint-min($name, $breakpoints: sizes.$grid-breakpoints) {
  $min: map.get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: sizes.$grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name, $breakpoints: sizes.$grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@each $breakpoint in map.keys(sizes.$grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, sizes.$grid-breakpoints);

    @each $prop, $abbrev in (margin: xf-m, padding: xf-p) {
      @each $size, $length in sizes.$xf-spacers {
        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }

        .#{$abbrev}t#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-top: $length !important;
        }

        .#{$abbrev}r#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-right: $length !important;
        }

        .#{$abbrev}b#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size} {
          #{$prop}-bottom: $length !important;
        }

        .#{$abbrev}l#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} {
          #{$prop}-left: $length !important;
        }
      }
    }

    @each $prop, $abbrev in (margin: xf-m) {
      @each $size, $length in sizes.$xf-spacers {
        .#{$abbrev}#{$infix}-n#{$size} {
          #{$prop}: -$length !important;
        }

        .#{$abbrev}t#{$infix}-n#{$size},
        .#{$abbrev}y#{$infix}-n#{$size} {
          #{$prop}-top: -$length !important;
        }

        .#{$abbrev}r#{$infix}-n#{$size},
        .#{$abbrev}x#{$infix}-n#{$size} {
          #{$prop}-right: -$length !important;
        }

        .#{$abbrev}b#{$infix}-n#{$size},
        .#{$abbrev}y#{$infix}-n#{$size} {
          #{$prop}-bottom: -$length !important;
        }

        .#{$abbrev}l#{$infix}-n#{$size},
        .#{$abbrev}x#{$infix}-n#{$size} {
          #{$prop}-left: -$length !important;
        }
      }
    }

    @each $size, $length in sizes.$xf-spacers {
      .xf-gap-#{$size} {
        gap: $length !important;
      }
    }

    // Some special margin utils
    .xf-m#{$infix}-auto {
      margin: auto !important;
    }

    .xf-mt#{$infix}-auto,
    .xf-my#{$infix}-auto {
      margin-top: auto !important;
    }

    .xf-mr#{$infix}-auto,
    .xf-mx#{$infix}-auto {
      margin-right: auto !important;
    }

    .xf-mb#{$infix}-auto,
    .xf-my#{$infix}-auto {
      margin-bottom: auto !important;
    }

    .xf-ml#{$infix}-auto,
    .xf-mx#{$infix}-auto {
      margin-left: auto !important;
    }
  }
}
